{"version":3,"sources":["Editor.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Code","require","default","SlateEditor","Editor","Value","plugins","highlight","block","line","classNames","initialValue","fromJSON","document","nodes","object","type","text","annotations","decorations","handleKeyDown","event","editor","next","ctrlKey","key","preventDefault","console","log","insertCode","code","language","_useState","useState","_useState2","Object","slicedToArray","value","setValue","toJSON","react_default","a","createElement","onChange","_ref","newValue","onKeyDown","App","className","src_Editor","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4KACMA,EAAOC,EAAQ,IAA0BC,QAEhCC,EAAeF,EAAQ,KAA/BG,OACCC,EAAUJ,EAAQ,GAAlBI,MAGFC,GAFeL,EAAQ,KAAuBC,QAEpC,CAACF,EAAK,CACpBO,WAAW,EACXC,MAAO,OACPC,KAAM,YACNC,WAAY,CACVF,MAAO,OACPC,KAAM,iBAIJE,EAAeN,EAAMO,SAAS,CAClCC,SAAU,CACRC,MAAO,CACL,CACEC,OAAQ,QACRC,KAAM,YACNF,MAAO,CACL,CACEC,OAAQ,OACRE,KAAM,sCAMhBC,YAAa,GACbC,YAAa,KAGf,SAASC,EAAcC,EAAYC,EAAaC,GAC9C,IAAIF,EAAMG,QAWR,OAAOD,IAVP,OAAQF,EAAMI,KACZ,IAAK,IACHJ,EAAMK,iBACNC,QAAQC,IAAI,QACZN,EAAOO,WAAW,CAAEC,KAAM,qBAAsBC,SAAU,SAC1D,MACF,QACE,OAAOR,KAOf,IAsBenB,EAtBe,WAAM,IAAA4B,EACRC,mBAAStB,GADDuB,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC3BK,EAD2BH,EAAA,GACpBI,EADoBJ,EAAA,GAYlC,OATAP,QAAQC,IAAIS,GACZV,QAAQC,IAAIS,EAAME,UAShBC,EAAAC,EAAAC,cAACvC,EAAD,CACEG,QAASA,EACT+B,MAAOA,EACPM,SAAU,SAAAC,GAAA,IAAUC,EAAVD,EAAGP,MAAH,OAA8BC,EAASO,IACjDC,UAAW1B,KCzDF2B,UARO,WACpB,OACEP,EAAAC,EAAAC,cAAA,OAAKM,UAAU,iBACbR,EAAAC,EAAAC,cAACO,EAAD,SCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAAS5C,SAAS6C,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ed557267.chunk.js","sourcesContent":["import React, {useState} from 'react';\nconst Code = require(\"@convertkit/slate-code\").default;\n\nconst {Editor: SlateEditor} = require('slate-react');\nconst { Value } = require('slate');\nconst MDserializer = require('slate-md-serializer').default;\n\nconst plugins = [Code({\n  highlight: true,\n  block: \"code\",\n  line: \"code-line\",\n  classNames: {\n    block: \"code\",\n    line: \"code-line\"\n  }\n})]\n\nconst initialValue = Value.fromJSON({\n  document: {\n    nodes: [\n      {\n        object: 'block',\n        type: 'paragraph',\n        nodes: [\n          {\n            object: 'text',\n            text: 'A line of text in a paragraph.',\n          },\n        ],\n      },\n    ],\n  },\n  annotations: {},\n  decorations: {},\n});\n\nfunction handleKeyDown(event: any, editor: any, next: any) {\n  if (event.ctrlKey) {\n    switch (event.key) {\n      case 'y':\n        event.preventDefault();\n        console.log('here');\n        editor.insertCode({ code: '<h1>Heading 1</h1>', language: \"html\" });\n        break;\n      default:\n        return next();\n    }\n  } else {\n    return next()\n  }\n}\n\nconst Editor: React.FC<any> = () => {\n  const [value, setValue] = useState(initialValue);\n  \n  console.log(value);\n  console.log(value.toJSON());\n  /*\n  const md = new MDserializer();\n\n\n  console.log(new MDserializer().serialize(value));\n  */\n\n  return (\n    <SlateEditor\n      plugins={plugins}\n      value={value}\n      onChange={({ value: newValue }: any) => setValue(newValue)}\n      onKeyDown={handleKeyDown}\n    />\n  );\n}\n\nexport default Editor;","import React from 'react';\nimport Editor from './Editor';\nimport './bootstrap.min.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App container\">\n      <Editor />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}